/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "src/typechain-types/common";

export interface RobotInterface extends utils.Interface {
  functions: {
    "batchAll(address[],uint256[],string[],string[],address[],address[],uint256[],uint256[],string[],string[],uint256[])": FunctionFragment;
    "batchLockt1155(address,address[],uint256[],string[],string[],uint256[])": FunctionFragment;
    "batchMint721(address,address[],string[],uint256[])": FunctionFragment;
    "bytesToHex(bytes)": FunctionFragment;
    "cancelSell(address,uint256)": FunctionFragment;
    "sell(address,uint256,uint256)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "batchAll"
      | "batchLockt1155"
      | "batchMint721"
      | "bytesToHex"
      | "cancelSell"
      | "sell"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "batchAll",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchLockt1155",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchMint721",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bytesToHex",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSell",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "sell",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "batchAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchLockt1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchMint721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bytesToHex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancelSell", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sell", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "Buy(address,uint256,uint256,address,address,uint256,uint256)": EventFragment;
    "CancelSell721(address,uint256)": EventFragment;
    "Lock1155(uint256)": EventFragment;
    "Mint721(address,uint256,uint256,address,address)": EventFragment;
    "Sell721(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Buy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelSell721"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Lock1155"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint721"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sell721"): EventFragment;
}

export interface BuyEventObject {
  contractAddress: string;
  cType: BigNumber;
  tokenId: BigNumber;
  from: string;
  to: string;
  amount: BigNumber;
  price: BigNumber;
}
export type BuyEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, string, BigNumber, BigNumber],
  BuyEventObject
>;

export type BuyEventFilter = TypedEventFilter<BuyEvent>;

export interface CancelSell721EventObject {
  c: string;
  tokenId: BigNumber;
}
export type CancelSell721Event = TypedEvent<
  [string, BigNumber],
  CancelSell721EventObject
>;

export type CancelSell721EventFilter = TypedEventFilter<CancelSell721Event>;

export interface Lock1155EventObject {
  tokenId: BigNumber;
}
export type Lock1155Event = TypedEvent<[BigNumber], Lock1155EventObject>;

export type Lock1155EventFilter = TypedEventFilter<Lock1155Event>;

export interface Mint721EventObject {
  c: string;
  tokenId: BigNumber;
  collectionId: BigNumber;
  createBy: string;
  to: string;
}
export type Mint721Event = TypedEvent<
  [string, BigNumber, BigNumber, string, string],
  Mint721EventObject
>;

export type Mint721EventFilter = TypedEventFilter<Mint721Event>;

export interface Sell721EventObject {
  c: string;
  tokenId: BigNumber;
  price: BigNumber;
}
export type Sell721Event = TypedEvent<
  [string, BigNumber, BigNumber],
  Sell721EventObject
>;

export type Sell721EventFilter = TypedEventFilter<Sell721Event>;

export interface Robot extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RobotInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    batchAll(
      addresses: PromiseOrValue<string>[],
      types: PromiseOrValue<BigNumberish>[],
      orderIds: PromiseOrValue<string>[],
      orderHashs: PromiseOrValue<string>[],
      froms: PromiseOrValue<string>[],
      tos: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      tokenURIs: PromiseOrValue<string>[],
      names: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchLockt1155(
      erc1155: PromiseOrValue<string>,
      tos: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      names: PromiseOrValue<string>[],
      tokenURIs: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchMint721(
      erc721: PromiseOrValue<string>,
      accounts: PromiseOrValue<string>[],
      tokenURIs: PromiseOrValue<string>[],
      collectionIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bytesToHex(
      buffer: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    cancelSell(
      c: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sell(
      c: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[string]>;
  };

  batchAll(
    addresses: PromiseOrValue<string>[],
    types: PromiseOrValue<BigNumberish>[],
    orderIds: PromiseOrValue<string>[],
    orderHashs: PromiseOrValue<string>[],
    froms: PromiseOrValue<string>[],
    tos: PromiseOrValue<string>[],
    tokenIds: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    tokenURIs: PromiseOrValue<string>[],
    names: PromiseOrValue<string>[],
    values: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchLockt1155(
    erc1155: PromiseOrValue<string>,
    tos: PromiseOrValue<string>[],
    tokenIds: PromiseOrValue<BigNumberish>[],
    names: PromiseOrValue<string>[],
    tokenURIs: PromiseOrValue<string>[],
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchMint721(
    erc721: PromiseOrValue<string>,
    accounts: PromiseOrValue<string>[],
    tokenURIs: PromiseOrValue<string>[],
    collectionIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bytesToHex(
    buffer: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  cancelSell(
    c: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sell(
    c: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    batchAll(
      addresses: PromiseOrValue<string>[],
      types: PromiseOrValue<BigNumberish>[],
      orderIds: PromiseOrValue<string>[],
      orderHashs: PromiseOrValue<string>[],
      froms: PromiseOrValue<string>[],
      tos: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      tokenURIs: PromiseOrValue<string>[],
      names: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchLockt1155(
      erc1155: PromiseOrValue<string>,
      tos: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      names: PromiseOrValue<string>[],
      tokenURIs: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchMint721(
      erc721: PromiseOrValue<string>,
      accounts: PromiseOrValue<string>[],
      tokenURIs: PromiseOrValue<string>[],
      collectionIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    bytesToHex(
      buffer: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    cancelSell(
      c: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    sell(
      c: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Buy(address,uint256,uint256,address,address,uint256,uint256)"(
      contractAddress?: PromiseOrValue<string> | null,
      cType?: PromiseOrValue<BigNumberish> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      from?: null,
      to?: null,
      amount?: null,
      price?: null
    ): BuyEventFilter;
    Buy(
      contractAddress?: PromiseOrValue<string> | null,
      cType?: PromiseOrValue<BigNumberish> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      from?: null,
      to?: null,
      amount?: null,
      price?: null
    ): BuyEventFilter;

    "CancelSell721(address,uint256)"(
      c?: null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): CancelSell721EventFilter;
    CancelSell721(
      c?: null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): CancelSell721EventFilter;

    "Lock1155(uint256)"(
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): Lock1155EventFilter;
    Lock1155(
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): Lock1155EventFilter;

    "Mint721(address,uint256,uint256,address,address)"(
      c?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      collectionId?: PromiseOrValue<BigNumberish> | null,
      createBy?: null,
      to?: null
    ): Mint721EventFilter;
    Mint721(
      c?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      collectionId?: PromiseOrValue<BigNumberish> | null,
      createBy?: null,
      to?: null
    ): Mint721EventFilter;

    "Sell721(address,uint256,uint256)"(
      c?: null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      price?: PromiseOrValue<BigNumberish> | null
    ): Sell721EventFilter;
    Sell721(
      c?: null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      price?: PromiseOrValue<BigNumberish> | null
    ): Sell721EventFilter;
  };

  estimateGas: {
    batchAll(
      addresses: PromiseOrValue<string>[],
      types: PromiseOrValue<BigNumberish>[],
      orderIds: PromiseOrValue<string>[],
      orderHashs: PromiseOrValue<string>[],
      froms: PromiseOrValue<string>[],
      tos: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      tokenURIs: PromiseOrValue<string>[],
      names: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchLockt1155(
      erc1155: PromiseOrValue<string>,
      tos: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      names: PromiseOrValue<string>[],
      tokenURIs: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchMint721(
      erc721: PromiseOrValue<string>,
      accounts: PromiseOrValue<string>[],
      tokenURIs: PromiseOrValue<string>[],
      collectionIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bytesToHex(
      buffer: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelSell(
      c: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sell(
      c: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    batchAll(
      addresses: PromiseOrValue<string>[],
      types: PromiseOrValue<BigNumberish>[],
      orderIds: PromiseOrValue<string>[],
      orderHashs: PromiseOrValue<string>[],
      froms: PromiseOrValue<string>[],
      tos: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      tokenURIs: PromiseOrValue<string>[],
      names: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchLockt1155(
      erc1155: PromiseOrValue<string>,
      tos: PromiseOrValue<string>[],
      tokenIds: PromiseOrValue<BigNumberish>[],
      names: PromiseOrValue<string>[],
      tokenURIs: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchMint721(
      erc721: PromiseOrValue<string>,
      accounts: PromiseOrValue<string>[],
      tokenURIs: PromiseOrValue<string>[],
      collectionIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bytesToHex(
      buffer: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelSell(
      c: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sell(
      c: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
