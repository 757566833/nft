/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Robot, RobotInterface } from "../../contracts/Robot";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_versoion",
        type: "string",
      },
      {
        internalType: "string",
        name: "_salt",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "contractAddress",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "cType",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "Buy",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "c",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "CancelSell721",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "Mint1155",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "c",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "collectionId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "createBy",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "Mint721",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "c",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "Sell721",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "addresses",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "types",
        type: "uint256[]",
      },
      {
        internalType: "string[]",
        name: "orderIds",
        type: "string[]",
      },
      {
        internalType: "string[]",
        name: "ordersHash",
        type: "string[]",
      },
      {
        internalType: "address[]",
        name: "fromAddresses",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "tos",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "tokenIds",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
      {
        internalType: "string[]",
        name: "tokenURIs",
        type: "string[]",
      },
      {
        internalType: "string[]",
        name: "names",
        type: "string[]",
      },
      {
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "supplies",
        type: "uint256[]",
      },
      {
        internalType: "string[]",
        name: "suppliesHash",
        type: "string[]",
      },
    ],
    name: "batchAll",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "erc1155",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "tos",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "tokenIds",
        type: "uint256[]",
      },
      {
        internalType: "string[]",
        name: "names",
        type: "string[]",
      },
      {
        internalType: "string[]",
        name: "tokenURIs",
        type: "string[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "supplies",
        type: "uint256[]",
      },
      {
        internalType: "string[]",
        name: "suppliesHash",
        type: "string[]",
      },
    ],
    name: "batchLock1155",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "erc721",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "accounts",
        type: "address[]",
      },
      {
        internalType: "string[]",
        name: "tokenURIs",
        type: "string[]",
      },
      {
        internalType: "uint256[]",
        name: "collectionIds",
        type: "uint256[]",
      },
    ],
    name: "batchMint721",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "c",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "tokenIds",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "prices",
        type: "uint256[]",
      },
    ],
    name: "batchSell",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "buffer",
        type: "bytes",
      },
    ],
    name: "bytesToHex",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "c",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "cancelSell",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "c",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "sell",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234620003195762002596803803806200001d816200031e565b928339810190604081830312620003195780516001600160401b03908181116200031957836200004f91840162000344565b916020938482015183811162000319576200006b920162000344565b825190828211620003035760008054926001958685811c95168015620002f8575b88861014620002e4578190601f9586811162000291575b5088908683116001146200022d57849262000221575b5050600019600383901b1c191690861b1781555b81519384116200020d5784548581811c9116801562000202575b87821014620001ee57838111620001a6575b50859284116001146200014157839495509262000135575b5050600019600383901b1c191690821b1790555b6040516121df9081620003b78239f35b01519050388062000111565b9190601f1984169585845280842093905b8782106200018e5750508385961062000174575b505050811b01905562000125565b015160001960f88460031b161c1916905538808062000166565b80878596829496860151815501950193019062000152565b8582528682208480870160051c820192898810620001e4575b0160051c019086905b828110620001d8575050620000f9565b838155018690620001c8565b92508192620001bf565b634e487b7160e01b82526022600452602482fd5b90607f1690620000e7565b634e487b7160e01b81526041600452602490fd5b015190503880620000b9565b8480528985208994509190601f198416865b8c8282106200027a575050841162000260575b505050811b018155620000cd565b015160001960f88460031b161c1916905538808062000252565b8385015186558c979095019493840193016200023f565b9091508380528884208680850160051c8201928b8610620002da575b918a91869594930160051c01915b828110620002cb575050620000a3565b8681558594508a9101620002bb565b92508192620002ad565b634e487b7160e01b83526022600452602483fd5b94607f16946200008c565b634e487b7160e01b600052604160045260246000fd5b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200030357604052565b919080601f84011215620003195782516001600160401b03811162000303576020906200037a601f8201601f191683016200031e565b92818452828287010111620003195760005b818110620003a257508260009394955001015290565b85810183015184820184015282016200038c56fe60c0604052600436101561001257600080fd5b60003560e01c80631546f67f146118335780633edbed1914611698578063451d89fa1461165157806354fd4d501461156e5780636a272462146114b0578063aa6ecb55146113b4578063ce73136f1461104e5763df36914a1461007457600080fd5b6101a036600319011261085e576004356001600160401b03811161085e576100a0903690600401611aaa565b60a0526024356001600160401b03811161085e576100c2903690600401611bfc565b6044356001600160401b03811161085e576100e1903690600401611b6a565b906064356001600160401b03811161085e57610101903690600401611b6a565b906084356001600160401b03811161085e57610121903690600401611aaa565b60805260a4356001600160401b03811161085e57610143903690600401611aaa565b906001600160401b0360c4351161085e576101633660c435600401611bfc565b906001600160401b0360e4351161085e576101833660e435600401611bfc565b94610104356001600160401b03811161085e576101a4903690600401611b6a565b95610124356001600160401b03811161085e576101c5903690600401611b6a565b94610144356001600160401b03811161085e576101e6903690600401611bfc565b95610164356001600160401b03811161085e57610207903690600401611bfc565b98610184356001600160401b03811161085e57610228903690600401611b6a565b9960a0515187518091149081611043575b5080611038575b8061102b575b8061101e575b80611013575b80611008575b80610ffd575b80610ff2575b80610fe7575b61027390611ebd565b60009a8b5b8a518d1015610321578c8b600161028f838d611efb565b51146102ba575b916102a76102ae926102b494611efb565b5190611d5a565b9c611d0e565b9b610278565b6102c7826102cf92611efb565b51918c611efb565b516000526002602052604060002054036102ea578c8b610296565b60405162461bcd60e51b815260206004820152600f60248201526e496e636f727265637420707269636560881b6044820152606490fd5b8b909a9496999895979a3403610fac5760005b60a05151811015610faa57808c600261034d838b611efb565b5103610ccd576103db9161036091611efb565b5160206103bd610379610373868c611efb565b51611fec565b6040519283916103ae82808501976103a06103938a611f0f565b9182815194859201611c5a565b019182815194859201611c5a565b0103601f198101835282611a72565b519020604051906020820152602081526103d681611a57565b611d67565b604051610405602082816103f88183019687815193849201611c5a565b8101038084520182611a72565b5190206104128284611efb565b51604051610430602082816103f88183019687815193849201611c5a565b51902003610c925760a0516001600160a01b039061044f908390611efb565b5116600061045d838d611efb565b516024604051809481936303a24d0760e21b835260048301525afa801561083a57600090610bf7575b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47091506040516104c6602082816103f88183019687815193849201611c5a565b519020036108ab576104d8818b611efb565b516104e3828d611efb565b516080516001600160a01b03906104fb908590611efb565b5116917f8effabb75f28a28d3080db6e33fd63bab02725de42cda7b8fd1132dc90d0e8c8600080a461058f60208b60018060a01b0361053c8560a051611efb565b511661055d8560018060a01b0361055582608051611efb565b511693611efb565b51604051627eeac760e11b81526001600160a01b03909316600484015260248301529092839190829081906044820190565b03915afa801561083a578c8392600092610872575b506105b2926102a791611efb565b6105bc8286611efb565b511061085e576106386105e76105d5610373848e611efb565b60206103bd610379610373878b611efb565b604051610604602082816103f88183019687815193849201611c5a565b5190206106118386611efb565b5160405161062f602082816103f88183019687815193849201611c5a565b519020146120c1565b8a8a60018060a01b0361064d8460a051611efb565b51166106668460018060a01b0361055582608051611efb565b5190610672858d611efb565b519161068986610682818d611efb565b5196611efb565b51823b1561085e576000946106b686926040519889978896879563af72bd9160e01b875260048701611f9d565b03925af1801561083a57610863575b505b8a8a887f5477f9965f93d173424ef8e21fac70c586b2fdb903ecf743d7a0973e6bfe3c9460808d610711876106828160018060a01b036107098260a051611efb565b511697611efb565b51958c6107548961074d8160018060a01b0361072e828a51611efb565b5116966001600160a01b0390610745908390611efb565b511695611efb565b5192611efb565b5191604051938452602084015260408301526060820152a48a6107778288611efb565b518a8c60018060a01b0361078d8660a051611efb565b51166107aa866106828160018060a01b0361072e82608051611efb565b5192813b1561085e57600060c49281956040519889968795637921219560e11b8752600487015260248601526044850152606484015260a060848401528160a48401525af191821561083a5760009283928392839261084f575b506080516001600160a01b039061081c908890611efb565b5116828215610846575bf11561083a5761083590611d0e565b610334565b6040513d6000823e3d90fd5b506108fc610826565b61085890611a2e565b38610804565b600080fd5b61086c90611a2e565b8c6106c5565b925050506020813d6020116108a3575b8161088f60209383611a72565b8101031261085e575181908c6105b26105a4565b3d9150610882565b6108c460208b60018060a01b0361053c8560a051611efb565b03915afa801561083a578b83918e93600091610bbe575b506108e68385611efb565b51116108f5575b5050506106c7565b8161090661096f9361090d93611efb565b5193611efb565b5160208d60018060a01b036109248760a051611efb565b511661093d8760018060a01b0361055582608051611efb565b51604051627eeac760e11b81526001600160a01b03909316600484015260248301529093849190829081906044820190565b03915afa90811561083a57600091610b88575b61098c9250611fdf565b6080516001600160a01b03906109a3908590611efb565b5116917f8effabb75f28a28d3080db6e33fd63bab02725de42cda7b8fd1132dc90d0e8c8600080a46109e460208b60018060a01b0361053c8560a051611efb565b03915afa801561083a578c8392600092610b4f575b50610a07926102a791611efb565b610a118286611efb565b511061085e57610a2a6105e76105d5610373848e611efb565b8a8a8660018060a01b03610a408560a051611efb565b51168b610aa960018060a01b03610a5988608051611efb565b5116946020610a7b89610a7481610a7481610a748189611efb565b5199611efb565b519160018060a01b03610a908b60a051611efb565b511661093d8b60018060a01b0361055582608051611efb565b03915afa90811561083a57600091610b19575b610ac69250611fdf565b823b1561085e57600094610af286926040519889978896879563af72bd9160e01b875260048701611f9d565b03925af1801561083a57610b0a575b508a818b6108ed565b610b1390611a2e565b8c610b01565b90506020823d602011610b47575b81610b3460209383611a72565b8101031261085e57610ac6915190610abc565b3d9150610b27565b925050506020813d602011610b80575b81610b6c60209383611a72565b8101031261085e575181908c610a076109f9565b3d9150610b5f565b90506020823d602011610bb6575b81610ba360209383611a72565b8101031261085e5761098c915190610982565b3d9150610b96565b93505050506020813d602011610bef575b81610bdc60209383611a72565b8101031261085e57818b8d9251386108db565b3d9150610bcf565b503d806000833e610c088183611a72565b81019060208183031261085e578051906001600160401b03821161085e57019080601f8301121561085e57815191610c3f83611b18565b91610c4d6040519384611a72565b8383526020848301011161085e577fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47092610c8d9160208085019101611c5a565b610486565b60405162461bcd60e51b81526020600482015260136024820152723b30b63ab2903430b9b41034b99032b93937b960691b6044820152606490fd5b50610cda60019189611efb565b5114610cea575b61083590611d0e565b60a0516001600160a01b0390610d01908390611efb565b51166020610d0f838d611efb565b516024604051809481936331a9108f60e11b835260048301525afa90811561083a57600091610f8b575b50898b897f5477f9965f93d173424ef8e21fac70c586b2fdb903ecf743d7a0973e6bfe3c9460808b610dad88610d8f81610d888160018060a01b03610d808260a051611efb565b511699611efb565b5198611efb565b51976001600160a01b0390610da5908390611efb565b511692611efb565b51604080516001600160a01b038a16815260208101939093526001908301526060820152a4610ddc828c611efb565b51600052600260205260406000205415610f5357610dfa828c611efb565b5160005260026020526000604081205560018060a01b03610e1d8360a051611efb565b5116908b6020610e3a8560018060a01b036105558260a051611efb565b516024604051809481936331a9108f60e11b835260048301525afa90811561083a57848d8f92600094610f1c575b50610e8291906001600160a01b0390610da5908390611efb565b5193803b1561085e57600092836064926040519788958694632142170760e11b865260018060a01b03166004860152602485015260448401525af191821561083a57600092839283928392610f0d575b50610edd868c611efb565b519082908215610f03575b6001600160a01b031690f1610ce1576040513d6000823e3d90fd5b6108fc9150610ee8565b610f1690611a2e565b38610ed2565b610e8292919450610f449060203d602011610f4c575b610f3c8183611a72565b8101906120a2565b939091610e68565b503d610f32565b60405162461bcd60e51b815260206004820152601060248201526f4974656d206e6f742073656c6c696e6760801b6044820152606490fd5b610fa4915060203d602011610f4c57610f3c8183611a72565b8d610d39565b005b60405162461bcd60e51b815260206004820152601360248201527276616c756520213d2073756d2076616c75657360681b6044820152606490fd5b50825189511461026a565b508151835114610264565b50845182511461025e565b508751855114610258565b508351885114610252565b506080515184511461024c565b5089516080515114610246565b5085518a5114610240565b905086511438610239565b61010036600319011261085e57611063611a18565b6001600160401b039060243582811161085e57611084903690600401611aaa565b9060443583811161085e5761109d903690600401611bfc565b9060643584811161085e576110b6903690600401611b6a565b9060843585811161085e576110cf903690600401611b6a565b9160a43586811161085e576110e8903690600401611bfc565b9560c43581811161085e57611101903690600401611bfc565b9060e43590811161085e5761111a903690600401611b6a565b958051865180911490816113a9575b508061139e575b80611393575b61114290979297611ebd565b6001600160a01b039160005b8251811015610faa576111a16020856111678487611efb565b5116611173848c611efb565b51604051627eeac760e11b81526001600160a01b039092166004830152602482015291829081906044820190565b0381888b165afa801561083a5760009061135f575b6111c591506102a7838d611efb565b6111cf828b611efb565b511061085e576111f98960206103bd610379610373866111f38f8261037391611efb565b95611efb565b604051611216602082816103f88183019687815193849201611c5a565b5190206112238284611efb565b51604051611241602082816103f88183019687815193849201611c5a565b5190200361132357808a868a6112c4846112bd81610d888f996112b6818f8f826112ae918e611275838f8161074d91611efb565b51856112818585611efb565b5116917f8effabb75f28a28d3080db6e33fd63bab02725de42cda7b8fd1132dc90d0e8c8600080a4611efb565b511698611efb565b5197611efb565b5194611efb565b5192888b163b1561085e576000936112f191604051978895869563af72bd9160e01b875260048701611f9d565b038183898c165af191821561083a5761130f92611314575b50611d0e565b61114e565b61131d90611a2e565b8b611309565b60405162461bcd60e51b815260206004820152601460248201527339bab838363c903430b9b41034b99032b93937b960611b6044820152606490fd5b506020813d60201161138b575b8161137960209383611a72565b8101031261085e576111c590516111b6565b3d915061136c565b508451835114611136565b508751855114611130565b905088511489611129565b3461085e57604036600319011261085e576113cd611a18565b6024359060018060a01b03809116906040516331a9108f60e11b81528360048201526020918282602481875afa90811561083a5761141692600092611491575b50163314612105565b82600052600281526040600020541561145f576002908360005252600060408120557fa5700e6e137f0686a6aeb9ae573396b3ce22f929686865812dbda871081193b9600080a3005b6064906040519062461bcd60e51b82526004820152600b60248201526a6e6f742073656c6c696e6760a81b6044820152fd5b6114a9919250843d8611610f4c57610f3c8183611a72565b908661140d565b3461085e57606036600319011261085e576114c9611a18565b6024356044359160018060a01b0380911690604051906331a9108f60e11b8252836004830152602082602481865afa90811561083a57611513926000926115555750163314612105565b61151e83151561215d565b816000526002602052826040600020557fcf5c0bd1db1bda5f264be4f84ee9dcd59f04653ca22197bbf710f2c3bb2b7c76600080a4005b6114a991925060203d8111610f4c57610f3c8183611a72565b3461085e57600036600319011261085e576040516000805461158f81611ca2565b8084529060019081811690811561162a57506001146115d1575b6115cd846115b981860382611a72565b604051918291602083526020830190611c7d565b0390f35b600080805292507f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b8284106116125750505081016020016115b9826115a9565b805460208587018101919091529093019281016115fa565b60ff191660208087019190915292151560051b850190920192506115b991508390506115a9565b3461085e57602036600319011261085e576004356001600160401b03811161085e573660238201121561085e576115b96103d66115cd923690602481600401359101611b33565b3461085e57606036600319011261085e576001600160401b0360043581811161085e576116c9903690600401611aaa565b90602490813581811161085e576116e4903690600401611bfc565b9060443590811161085e576116fd903690600401611bfc565b611714845183518091149081611828575b50611ebd565b60005b8451811015610faa576001600160a01b0390816117348288611efb565b5116916117418286611efb565b516040519384916331a9108f60e11b83526004830152818860209384935afa93841561083a57611806946117819160009161180b575b5083163314612105565b61179661178e8487611efb565b51151561215d565b60026117a28487611efb565b51916117ae8589611efb565b51600052526040600020556117c38288611efb565b51166117cf8286611efb565b516117da8386611efb565b51917fcf5c0bd1db1bda5f264be4f84ee9dcd59f04653ca22197bbf710f2c3bb2b7c76600080a4611d0e565b611717565b6118229150833d8511610f4c57610f3c8183611a72565b8a611777565b90508251148661170e565b3461085e57608036600319011261085e5761184c611a18565b6001600160401b036024803582811161085e5761186d903690600401611aaa565b91604493843582811161085e57611888903690600401611b6a565b9160643590811161085e576118a1903690600401611bfc565b906118bc855184518091149081611a0d575b50959295611ebd565b6001600160a01b039081169160005b8151811015610faa5760405163e00dd16160e01b81526020908181600481895afa90811561083a576000916119e0575b50600181018091116119cb57857fa491b2906955de9b9a0a0e6d8d87c1688f5207237fe435504138a6b00e7e92e86040611935868d611efb565b519488611942888a611efb565b5116825191338352820152a4826119598284611efb565b5116906119668187611efb565b5191853b1561085e5761199c92600091604051948592839263d0def52160e01b8452600484015260408c8401528d830190611c7d565b038183895af191821561083a576119b7926119bc5750611d0e565b6118cb565b6119c590611a2e565b89611309565b87634e487b7160e01b60005260116004526000fd5b90508181813d8311611a06575b6119f78183611a72565b8101031261085e57518a6118fb565b503d6119ed565b9050835114886118b3565b600435906001600160a01b038216820361085e57565b6001600160401b038111611a4157604052565b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b03821117611a4157604052565b90601f801991011681019081106001600160401b03821117611a4157604052565b6001600160401b038111611a415760051b60200190565b81601f8201121561085e57803591611ac183611a93565b92611acf6040519485611a72565b808452602092838086019260051b82010192831161085e578301905b828210611af9575050505090565b81356001600160a01b038116810361085e578152908301908301611aeb565b6001600160401b038111611a4157601f01601f191660200190565b929192611b3f82611b18565b91611b4d6040519384611a72565b82948184528183011161085e578281602093846000960137010152565b81601f8201121561085e57803590611b8182611a93565b92604092611b9184519586611a72565b808552602093848087019260051b8501019383851161085e57858101925b858410611bc0575050505050505090565b83356001600160401b03811161085e57820185603f8201121561085e578791611bf187838786809601359101611b33565b815201930192611baf565b81601f8201121561085e57803591611c1383611a93565b92611c216040519485611a72565b808452602092838086019260051b82010192831161085e578301905b828210611c4b575050505090565b81358152908301908301611c3d565b60005b838110611c6d5750506000910152565b8181015183820152602001611c5d565b90602091611c9681518092818552858086019101611c5a565b601f01601f1916010190565b90600182811c92168015611cd2575b6020831014611cbc57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611cb1565b90611ce682611b18565b611cf36040519182611a72565b8281528092611d04601f1991611b18565b0190602036910137565b6000198114611d1d5760010190565b634e487b7160e01b600052601160045260246000fd5b908151811015611d44570160200190565b634e487b7160e01b600052603260045260246000fd5b91908201809211611d1d57565b8051600181811b600292808204841490151715611d1d57611d888291611cdc565b93604051611d9581611a57565b601081526f181899199a1a9b1b9c1cb0b131b232b360811b60208201526000925b611dfa575b505050506022611df791604051809461060f60f31b6020830152611de88151809260208786019101611c5a565b81010390810184520182611a72565b90565b8151831015611eb857611e0d8383611d33565b519281518015611ea25760f8946001600160f81b0319918291611e349190881c0485611d33565b51169482871b95838704891484151715611d1d5760001a611e55878b611d33565b53611e608386611d33565b51901c83518015611ea257611e76910684611d33565b511690858501809511611d1d578594611e96611e9c9360001a918a611d33565b53611d0e565b92611db6565b634e487b7160e01b600052601260045260246000fd5b611dbb565b15611ec457565b60405162461bcd60e51b815260206004820152600f60248201526e6c656e677468206e6f742073616d6560881b6044820152606490fd5b8051821015611d445760209160051b010190565b90600091600190815491611f2283611ca2565b92818116908115611f8a5750600114611f3a57505050565b8091929394506000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6906000915b848310611f77575050500190565b8181602092548587015201920191611f69565b60ff191683525050811515909102019150565b95949390608093611fda93611fcc9260018060a01b03168952602089015260a0604089015260a0880190611c7d565b908682036060880152611c7d565b930152565b91908203918211611d1d57565b80156120845780816000925b61207057508061200783611cdc565b92915b61201357505090565b6000198201918211611d1d5781600a80830492818402918483041484151715611d1d5761204360ff928392611fdf565b16603001908111611d1d5760f81b6001600160f81b03191660001a906120699085611d33565b538061200a565b9161207c600a91611d0e565b920480611ff8565b5060405161209181611a57565b60018152600360fc1b602082015290565b9081602091031261085e57516001600160a01b038116810361085e5790565b156120c857565b60405162461bcd60e51b815260206004820152601560248201527439bab838363c903b30b63ab29034b99032b93937b960591b6044820152606490fd5b1561210c57565b60405162461bcd60e51b8152602060048201526024808201527f5065726d697373696f6e2064656e6965643a6e66742069742773206e6f7420796044820152636f75727360e01b6064820152608490fd5b1561216457565b60405162461bcd60e51b815260206004820152601a60248201527f7072696365206d757374206d6f7265207468616e2074686520300000000000006044820152606490fdfea26469706673582212203193a8457460f6be6c565f9867da1c7b86b9cd06f1531a9a37d529e0627e8daf64736f6c63430008110033";

type RobotConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RobotConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Robot__factory extends ContractFactory {
  constructor(...args: RobotConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _versoion: PromiseOrValue<string>,
    _salt: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Robot> {
    return super.deploy(_versoion, _salt, overrides || {}) as Promise<Robot>;
  }
  override getDeployTransaction(
    _versoion: PromiseOrValue<string>,
    _salt: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_versoion, _salt, overrides || {});
  }
  override attach(address: string): Robot {
    return super.attach(address) as Robot;
  }
  override connect(signer: Signer): Robot__factory {
    return super.connect(signer) as Robot__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RobotInterface {
    return new utils.Interface(_abi) as RobotInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Robot {
    return new Contract(address, _abi, signerOrProvider) as Robot;
  }
}
